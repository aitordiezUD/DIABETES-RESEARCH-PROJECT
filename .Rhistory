numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a vioplot object iterating through numeric columns
vioplot(d3[, numeric_cols], col = "lightblue",
hclust.method = "ward.D2")  # Optional hierarchical clustering
# Assuming your data is in a dataframe called 'df'
library(ggplot2)
# Select numeric columns (replace 'numeric_cols' with actual column names)
numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a ggplot object iterating through numeric columns
ggplot(d3, aes(x = factor(1), y = .)) +
geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
labs(x = "", y = "Variable Value") +  # Remove x-axis label
theme_minimal() +
# Add points for outliers (replace IQR rule with your preferred method)
geom_point(aes(x = factor(1), y = df[, numeric_cols]),
color = "red", size = 2,
filter(!between(df[, numeric_cols],
IQR(df[, numeric_cols], na.rm = TRUE)[1],
IQR(df[, numeric_cols], na.rm = TRUE)[3]))) +
# Loop through columns and add variable names as facet labels
do.call(function(...) {
lapply(numeric_cols, function(x) labs(scales = list(x = x)))
}, ...)
# Assuming your data is in a dataframe called 'df'
library(ggplot2)
# Select numeric columns (replace 'numeric_cols' with actual column names)
numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a ggplot object iterating through numeric columns
ggplot(d3, aes(x = factor(1), y = .)) +
geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
labs(x = "", y = "Variable Value") +  # Remove x-axis label
theme_minimal() +
# Add points for outliers (replace IQR rule with your preferred method)
geom_point(aes(x = factor(1), y = d3[, numeric_cols]),
color = "red", size = 2,
filter(!between(df[, numeric_cols],
IQR(df[, numeric_cols], na.rm = TRUE)[1],
IQR(df[, numeric_cols], na.rm = TRUE)[3]))) +
# Loop through columns and add variable names as facet labels
do.call(function(...) {
lapply(numeric_cols, function(x) labs(scales = list(x = x)))
}, ...)
# Assuming your data is in a dataframe called 'df'
library(ggplot2)
# Select numeric columns (replace 'numeric_cols' with actual column names)
numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a ggplot object iterating through numeric columns
ggplot(d3, aes(x = factor(1), y = .)) +
geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
labs(x = "", y = "Variable Value") +  # Remove x-axis label
theme_minimal() +
# Add points for outliers (replace IQR rule with your preferred method)
geom_point(aes(x = factor(1), y = df[, numeric_cols]),
color = "red", size = 2,
filter(!between(d3[, numeric_cols],
IQR(d3[, numeric_cols], na.rm = TRUE)[1],
IQR(d3[, numeric_cols], na.rm = TRUE)[3]))) +
# Loop through columns and add variable names as facet labels
do.call(function(...) {
lapply(numeric_cols, function(x) labs(scales = list(x = x)))
}, ...)
ggplot(d3, aes(x = factor(1), y = .)) +
+     geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
+     facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
+     labs(x = "", y = "Variable Value") +  # Remove x-axis label
+     theme_minimal() +
+     # Add points for outliers (replace IQR rule with your preferred method)
+     geom_point(aes(x = factor(1), y = df[, numeric_cols]),
+                color = "red", size = 2,
library(ggplot2)
# Assuming df is your data frame containing numeric variables
# Function to create boxplots for numeric variables
create_boxplots <- function(data) {
plots <- lapply(names(data), function(var) {
ggplot(data, aes_string(y = var)) +
geom_boxplot(fill = "#99CCFF", color = "black") +
labs(title = paste("Boxplot of", var)) +
theme_minimal()
})
return(plots)
}
# Call the function to create boxplots
boxplots <- create_boxplots(d3)
# Print boxplots
gridExtra::grid.arrange(grobs = boxplots, ncol = 2)
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, aes(x = names(numeric_cols), y = .)) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
rlang::last_trace()
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, aes(x = names(numeric_cols), y = .)) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, aes(x = names(numeric_cols), y = ".")) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, y = ".")) +
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, aes(x = names(numeric_cols), y = ".")) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, aes(x = "names(numeric_cols)", y = ".")) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2)
# Identify numeric variables (assuming d3 is your data frame):
numeric_cols <- sapply(d3, is.numeric)
# Check for missing values:
summary(d3[, numeric_cols])
# Filter missing values (optional, be cautious):
# d3 <- na.omit(d3)  # Uncomment if needed
# Create boxplots with informative labels:
ggplot(d3, aes(x = variable_name, y = .)) +  # Assuming 'variable_name' for categories
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2)
# Identify numeric variables (assuming d3 is your data frame):
numeric_cols <- sapply(d3, is.numeric)
# Check for missing values:
summary(d3[, numeric_cols])
# Filter missing values (optional, be cautious):
# d3 <- na.omit(d3)  # Uncomment if needed
# Create boxplots with informative labels:
ggplot(d3, aes(x = BMI, y = .)) +  # Assuming 'variable_name' for categories
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
library(ggplot2)
# Identify numeric variables (assuming d3 is your data frame):
numeric_cols <- sapply(d3, is.numeric)
# Check for missing values:
summary(d3[, numeric_cols])
# Filter missing values (optional, be cautious):
# d3 <- na.omit(d3)  # Uncomment if needed
# Create boxplots with informative labels:
ggplot(d3, aes(x = BMI, y = ".")) +  # Assuming 'variable_name' for categories
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
boxplot(d3)
boxplot(d3[,-c(5,9)])
boxplot(d3[,-c(6)])
boxplot(d3[,c(6)])
library(ggplot2) # for creating boxplots
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(d3, aes(x = names(numeric_cols), y = names(numeric_cols))) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(data = d3, aes(x = factor(names(numeric_cols)), y = .)) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(data = d3, aes(x = factor(names(numeric_cols)), y = .)) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
rlang::last_trace()
# Identify numeric variables:
numeric_cols <- sapply(d3, is.numeric)
# Create boxplots with informative labels:
ggplot(data = d3, aes(x = factor(names(numeric_cols)), y = 1:768)) +
geom_boxplot() +  # Create boxplots
labs(title = "Distribution of Numeric Variables with Outliers Highlighted",
x = "Variable Name",
y = "Value") +
theme_bw() +  # Set a clean black and white theme
stat_summary(fun.y = IQR, geom = "point", color = "red")  # Highlight IQR outliers in red
ggplot(data = YourDataFrame, aes(x = "BMI", y = BMI)) +
geom_boxplot()
ggplot(data = d3, aes(x = "BMI", y = BMI)) +
geom_boxplot()
ggplot(data = d3, aes(x = factor(names(d3[,1:8])), y = d3[,1:8])) +
geom_boxplot()
ggplot(data = d3, aes_string(x = "factor(names(d3)[1:8])", y = names(d3)[1])) +
geom_boxplot()
source("~/.active-rstudio-document")
View(boxplots)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A somewhat misleading boxplot") +
xlab("")
View(data)
ggplot(data = d3, aes(x = "BMI", y = BMI)) +
geom_boxplot()
View(d3)
ggplot(data = d3, aes(x = c("BMI","GLUCOSE"), y = c(BMI,Glucose)) +
geom_boxplot()
ggplot(data = d3, aes(x = c("BMI","GLUCOSE"), y = c(BMI,Glucose)) +
+ geom_boxplot()
ggplot(data = d3, aes(x = c("BMI","GLUCOSE"), y = c(BMI,Glucose)) + geom_boxplot()
ggplot(data = d3, aes(x = "BMI", y = BMI)) +
geom_boxplot()
ggplot(data = d3, aes(x = "BMI", y = BMI)) +
geom_boxplot()
ggplot(data = d3, aes(x = c("BMI","GLUCOSE"), y = c(BMI,Glucose)) + geom_boxplot()
library(tidyr)
library(ggplot2)
# Assuming d3 is your data frame containing BMI and GLUCOSE variables
# Reshape the data into long format
d3_long <- pivot_longer(d3, cols = c(BMI, GLUCOSE), names_to = "Variable")
library(tidyr)
library(ggplot2)
# Assuming d3 is your data frame containing BMI and GLUCOSE variables
# Reshape the data into long format
d3_long <- pivot_longer(d3, cols = c(BMI, Glucose), names_to = "Variable")
# Plot the boxplot
ggplot(data = d3_long, aes(x = Variable, y = value)) +
geom_boxplot() +
labs(title = "Boxplot of BMI and GLUCOSE")
# Assuming your data is in a dataframe called 'd3'
library(ggplot2)
# Select numeric columns (replace 'numeric_cols' with actual column names)
numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a ggplot object iterating through numeric columns
ggplot(d3, aes(x = factor(1), y = .)) +
geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
labs(x = "", y = "Variable Value") +  # Remove x-axis label
theme_minimal() +
# Add points for outliers (replace IQR rule with your preferred method)
geom_point(aes(x = factor(1), y = d3[, numeric_cols]),
color = "red", size = 2,
filter(!between(d3[, numeric_cols],
IQR(d3[, numeric_cols], na.rm = TRUE)[1],
IQR(d3[, numeric_cols], na.rm = TRUE)[3]))) +
# Loop through columns and add variable names as facet labels
do.call(function(...) {
lapply(numeric_cols, function(x) labs(scales = list(x = x)))
}, ...)
# Assuming your data is in a dataframe called 'd3'
library(ggplot2)
# Select numeric columns (replace 'numeric_cols' with actual column names)
numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a ggplot object iterating through numeric columns
ggplot(d3, aes(x = 1, y = value)) +
geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
labs(x = "", y = "Variable Value") +  # Remove x-axis label
theme_minimal() +
# Add points for outliers (replace IQR rule with your preferred method)
geom_point(aes(x = factor(1), y = d3[, numeric_cols]),
color = "red", size = 2,
filter(!between(d3[, numeric_cols],
IQR(d3[, numeric_cols], na.rm = TRUE)[1],
IQR(d3[, numeric_cols], na.rm = TRUE)[3]))) +
# Loop through columns and add variable names as facet labels
do.call(function(...) {
lapply(numeric_cols, function(x) labs(scales = list(x = x)))
}, ...)
# Assuming your data is in a dataframe called 'd3'
library(ggplot2)
# Select numeric columns (replace 'numeric_cols' with actual column names)
numeric_cols <- names(d3)[sapply(d3, is.numeric)]
# Create a ggplot object iterating through numeric columns
ggplot(d3, aes(x = 1, y = value)) +
geom_boxplot(aes(fill = factor(1)), notch = TRUE) +  # Boxplot with notch
facet_wrap(~ .id, nrow = 2) +  # Wrap by variable if many columns
labs(x = "", y = "Variable Value") +  # Remove x-axis label
theme_minimal() +
# Loop through columns and add variable names as facet labels
do.call(function(...) {
lapply(numeric_cols, function(x) labs(scales = list(x = x)))
}, ...)
# Reshape d3 to long format in order to plot it
data_long <- gather(d3, key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value)) +
geom_boxplot() +
labs(x = "Measurement", y = "Value", title = "Boxplot of Value by Group")
library(ggplot2)
library(tidyr)
# Generate example data
set.seed(123)
data <- data.frame(
Group1 = rnorm(100),
Group2 = rnorm(100),
Group3 = rnorm(100)
)
# Reshape data to long format
data_long <- gather(data, key = "Group", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Group, y = Value)) +
geom_boxplot() +
labs(x = "Group", y = "Value", title = "Boxplot of Value by Group")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,1:4], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value)) +
geom_boxplot() +
labs(x = "Measurement", y = "Value", title = "Boxplot of Value by Group")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,1:5], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value)) +
geom_boxplot() +
labs(x = "Measurement", y = "Value", title = "Boxplot of Value by Group")
data_long <- gather(d3[,1:8], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value)) +
geom_boxplot() +
labs(x = "Measurement", y = "Value", title = "Boxplot of Value by Group")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,1:8], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="grey", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,1:8], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="grey", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,1:8], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=Measurement)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="grey", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,c("BloodPressure","BMI")], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=Measurement)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="grey", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,c("BloodPressure","BMI")], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=Measurement)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="#636363", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
View(d3)
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,c("BloodPressure","BMI","Glucose")], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=Measurement)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="#636363", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,c("BloodPressure","BMI","Glucose","Insuline")], key = "Measurement", value = "Value")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,c("BloodPressure","BMI","Glucose","Insulin")], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=Measurement)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="#636363", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Reshape d3 to long format in order to plot it
data_long <- gather(d3[,c("BloodPressure","BMI","Glucose","Insulin")], key = "Measurement", value = "Value")
# Create boxplot using ggplot2
ggplot(data_long, aes(x = Measurement, y = Value, fill=Measurement)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE) +
geom_jitter(color="#636363", size=0.7, alpha=0.5) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Boxplots of BloodPressure, BMI, Glucose and Insulin") +
xlab("")
#Study of the correlation coefficients between variables
cor <- cor(d3 %>% select_if(is.numeric))
#Plotting the results of the correlation analysis
corrplot(cor, method = "color", tl.cex = 0.7, tl.col = "black")
