View(tb4)
m<-matrix(1:4,ncol=2)
m
size(m)
length(m)
unlist(m)
l<-list(uno = 1:10,dos=2:20)
df<- as.data.frame(l)
l<-list(uno = 1:10,dos=11:20)
df<- as.data.frame(l)
View(df)
# Exercise 146
app <- list(
22:2,
runif(10),
c(pi,sqrt(2)),
c(T,T,F,F)
)
b <- sapply(app,var)
b
d <- sapply(app, "[",2)
d
s <- lapply(1:10,function(x)x^2)
s
unlist(s)
sapply(s)
sapply(s,"[")
l
class(l[1])
class(l[[1])
class(l[[1]])
is.vector(l)
is.atomic(l)
is.atomic(1:10)
m <- diag(5)
m
m <- diag(c(1,9,2))
m
diag(m)
y ~ x
y(2)
w<- lapply(1:10, function(x)x**2)
w
w.names
names(w)
z<-unlist(w)
is.list(z)
is.atomic(z)
print(now(tzone="Asia/Tokyo"))
# print(with_tz(now(), tzone="Asia/Tokyo"))
# print(strftime(Sys.time(), tz="Asia/Tokyo"))
print(now(tzone="Asia/Tokyo"))
print(with_tz(now(), tzone="Asia/Tokyo"))
print(strftime(Sys.time(), tz="Asia/Tokyo"))
summary(iris)
str(iris)
cor(rock&area,rock$shape)
cor(rock$area,rock$shape)
cor(rock$area,rock$peri)
cor(rock$peri,rock$perm)
source("~/.active-rstudio-document")
View(df)
View(df)
summary(df)
boxplot(df)
cor(df$residual.sugar,df$density)
plot(iris)
plot(state.x77)
view(state.x77)
state.x77
plot(state.x77[,"Income"],state.x77[,"Illiteracy"], col = "red")
plot(state.x77[,"Income"],state.x77[,"Illiteracy"], col = 1:2
)
plot(state.x77[,"Income"],state.x77[,"Illiteracy"], col = c("red","blue"))
x <- runif(100)
plot(x, type="l")
plot(x, type="l",col="blue")
plot(1:8, sample(1:8), pch=24, cex=1.5, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1.5, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1, bg="orange",main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1.5, bg="orange",main="Random points", xlab="x axis", ylab="y axis")
x <- rnorm(100)
y <- rnorm(100)
x
y
shiny::runApp('C:/Users/aitor/Downloads')
source("~/.active-rstudio-document")
install.packages("ggplot2")
source("~/.active-rstudio-document")
ggplot(datos, aes(x = Año, y = Valor, group = 1)) +
geom_line() +
labs(title = "Análisis Temporal", x = "Año", y = "Valor") +
theme_minimal()
source("~/.active-rstudio-document")
ggplot(datos, aes(x = Año, y = Valor, group = 1)) +
geom_line() +
labs(title = "Análisis Temporal", x = "Año", y = "Valor") +
theme_minimal()
?geom_histogram
setwd("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT")
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
viridis,
hrbrthemes,
tidyr         # Reshape dataframes, helpful to plot them
)
source("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT/DESCRIPTIVE ANALYSIS/DATASET 3/descriptive_analysis_D3.R")
source("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT/DESCRIPTIVE ANALYSIS/DATASET 3/descriptive_analysis_D3.R")
#Reading the second dataset
d2 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 2/diabetes_d2.csv")
#Selection of the most relevant variables for the analysis
d2 <- d2[, c("age", "race", "gender", "time_in_hospital",
"num_lab_procedures", "A1Cresult", "diabetesMed")]
#Convert all variables to factors
d2 <- d2 %>% mutate_at(c(1,2,3,6,7),as.factor)
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
tidyr,         # Reshape dataframes, helpful to plot them
skimr,
kableExtra
)
skim(d2)
skim(d2)
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
tidyr,         # Reshape dataframes, helpful to plot them
skimr,
kableExtra,
summarytools
)
library(summarytools)
summarytools::descr(d2)
install.packages("sjPlot")
sjPlot::tab_df(d2)
cov_matrix <- cov(d3 %>% select_if(is.numeric))
corrplot(cov_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
# Rescale covariance matrix to [-1, 1] range
rescaled_cov_matrix <- cov2cor(cov_matrix)
# Plot the rescaled covariance matrix as a heatmap
corrplot(rescaled_cov_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)
source("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT/DESCRIPTIVE ANALYSIS/DATASET 2/descriptive_analysis_D2.R")
source("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT/DESCRIPTIVE ANALYSIS/DATASET 2/descriptive_analysis_D2.R")
#Plotting the age distribution
ggplot(d2, aes(x = age)) +
geom_bar(stat = "count", fill = "steelblue") +  # Count occurrences of each species
labs(title = "Distribution of patients' age", x = "Age", y = "Count") +
theme_minimal()
#Plotting distribution of Hospital Stay Length
ggplot(d2, aes(x = time_in_hospital)) +
geom_histogram(stat="count",fill = "steelblue") +
labs(title = "Distribution of Hospital Stay Length", x = "Days in Hospital", y = "Number of Patients") +
theme_minimal()
#Prop table between Race and Gender
round(prop.table(table(d2$race, d2$gender)),3) %>%
kable("html") %>%
kable_styling(full_width = F)
#Plotting A1C Results
ggplot(d2[d2$A1Cresult!="None",], aes(x = A1Cresult)) +
geom_histogram(stat="count", fill = "steelblue") +
labs(title = "Distribution of A1C Results", x = "A1C (%)", y = "Number of Patients") +
theme_minimal()
#Plot the relation between the age and if they have been medicated
ggplot(d2, aes(x = age, fill = diabetesMed)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Relationship between Age Range and Medication Status",
x = "Age",
y = "Patient count") +
theme_minimal()
#Plot the relation between the age and A1C result
ggplot(d2[d2$A1Cresult != "None",], aes(x = age, fill = A1Cresult)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Relationship between Age Range and A1C Results",
x = "Age",
y = "A1C Results") +
theme_minimal()
#Grouping the number of lab procedures
d2$group_procedures <- ifelse(d2$num_lab_procedures < 31,"<31",
ifelse(d2$num_lab_procedures < 44,"31-44",
ifelse(d2$num_lab_procedures < 57,"44-57","57-132")))
d2$group_procedures <- as.factor(d2$group_procedures)
#Prop table between A1C result and group of procedures
round(prop.table(table(d2[d2$A1Cresult!="None","A1Cresult"],d2[d2$A1Cresult!="None","group_procedures"])),3)
#Median of time spent by age
average_time <- aggregate(TimeSpent ~ AgeRange, d2, mean)
View(d2)
#Median of time spent by age
average_time <- aggregate(time_in_hospital ~ age, d2, mean)
#Plot of the median of time spent by age
ggplot(average_time, aes(x = age, y = time_in_hospital, fill = age)) +
geom_col() +
labs(title = "Time spent in hospital by age",
x = "Age",
y = "Average time spent") +
theme_minimal()
table(d2$race)
table(d2$race,d2$num_lab_procedures)
table(d2$race,d2$group_procedures)
#Plot of the median of time spent by age
ggplot(average_time, aes(x = age, y = time_in_hospital)) +
geom_col(color = "steelblue") +
labs(title = "Time spent in hospital by age",
x = "Age",
y = "Average time spent") +
theme_minimal()
#Plot of the median of time spent by age
ggplot(average_time, aes(x = age, y = time_in_hospital)) +
geom_col(fill = "steelblue") +
labs(title = "Time spent in hospital by age",
x = "Age",
y = "Average time spent") +
theme_minimal()
summary(d2)
#Reading the second dataset
d2 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 2/diabetes_d2.csv")
#Selection of the most relevant variables for the analysis
d2 <- d2[, c("age", "race", "gender", "time_in_hospital",
"num_lab_procedures", "A1Cresult", "diabetesMed")]
#Convert all variables to factors
d2 <- d2 %>% mutate_at(c(1,2,3,6,7),as.factor)
factor_vars <- d2 %>% select_if(is.factor)
summaryDf <- skim(factor_vars)
summaryWide <- skim_to_wide(summaryDf)
ftSummary <- flextable(summaryWide)
print(ftSummary)
summaryDf
summaryDf
summaryWide
factor_vars <- d2 %>% select_if(is.factor)
summaryDf <- skim(factor_vars)
ftSummary <- flextable(summaryDf)
print(ftSummary)
ftSummary <- flextable(summaryDf)
ftSummary <- flextable::set_table_properties(ftSummary, width = .5, layout = "autofit")
print(ftSummary)
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
tidyr,         # Reshape dataframes, helpful to plot them
skimr,
kableExtra,
DescTools     # calculation of the mode
)
factor_vars <- d2 %>% select_if(is.factor)
summaryDf <- skim(factor_vars)
summaryDf <- cbind(summaryDf,apply(d2 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
ftSummary <- flextable(summaryDf)
print(ftSummary)
factor_vars <- d2 %>% select_if(is.factor)
summaryDf <- skim(factor_vars)
summaryDf <- cbind(summaryDf,"Mode" = apply(d2 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
ftSummary <- flextable(summaryDf)
print(ftSummary)
save_as_docx(ftSummary, "DESCRIPTIVE ANALYSIS/DATASET 2/summary_d2.docx")
save_as_docx(ftSummary, path = "DESCRIPTIVE ANALYSIS/DATASET 2/summary_d2.docx")
summaryDf <- summaryDf[,-c(3,4,5)]
#Parsing the dataFrame to a flextable in order to make it prettier
ftSummary <- flextable(summaryDf)
#Saving the table in a docx in order to copy and paste in the report
save_as_docx(ftSummary, path = "DESCRIPTIVE ANALYSIS/DATASET 2/summary_d2.docx")
#Plotting the age distribution
source("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT/DESCRIPTIVE ANALYSIS/DATASET 2/descriptive_analysis_D2.R")
#Prop table between A1C result and group of procedures
round(prop.table(table(d2[d2$A1Cresult!="None","A1Cresult"],d2[d2$A1Cresult!="None","group_procedures"])),3)
#Median of time spent by age
average_time <- aggregate(time_in_hospital ~ age, d2, mean)
#Plot of the median of time spent by age
ggplot(average_time, aes(x = age, y = time_in_hospital)) +
geom_col(fill = "steelblue") +
labs(title = "Time spent in hospital by age",
x = "Age",
y = "Average time spent") +
theme_minimal()
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
viridis,
hrbrthemes,
tidyr         # Reshape dataframes, helpful to plot them
)
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d2 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf,"Mode" = apply(d2 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
summaryDf_factors
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
viridis,
hrbrthemes,
tidyr         # Reshape dataframes, helpful to plot them
)
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d3 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf,"Mode" = apply(d3 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
#Deletion of some columns that aren't relevant
summaryDf_factors <- summaryDf_factors[,-c(3,4,5)]
#Parsing the dataFrame to a flextable in order to make it prettier
ftSummary_factors <- flextable(summaryDf_factors)
# Creating an extend summary of the numeric values of the data frame
dfSummary_num = d3 %>% select_if(is.numeric) %>% stat.desc(norm=TRUE)
# Deletion of some irrelevant rows
dfSummary_num <- dfSummary_num[-c(7,10,11,16,18),]
#Round numeric columns to 2 decimal numbers
dfSummary_num <- dfSummary_num %>% mutate(across(where(is.numeric), round, digits = 2))
#adding a column with the row names. Necessary for the flextable
statRow <- data.frame("Stat"=rownames(dfSummary))
dfSummary_num <- cbind(statRow,dfSummary_num)
dfSummary_num = d3 %>% select_if(is.numeric) %>% stat.desc(norm=TRUE)
dfSummary_num <- dfSummary_num[-c(7,10,11,16,18),]
dfSummary_num <- dfSummary_num %>% mutate(across(where(is.numeric), round, digits = 2))
statRow <- data.frame("Stat"=rownames(dfSummary_num))
dfSummary_num <- cbind(statRow,dfSummary_num)
quartiles <- cbind("Stat" = c("Q1","Q2","Q3","IQR"),apply(d3[,1:8], 2, function(x) {
q1 <- quantile(x,0.25)
q2 <- quantile(x,0.5)
q3 <- quantile(x,0.75)
iqr <- IQR(x)
c(Q1 = q1, Q2 = q2, Q3=q3 , IQR = iqr)
}))
# Add the quartiles and IQR as new rows to the dataframe
dfSummary_num <- rbind(dfSummary_num, quartiles)
#Deletion of rownames because they are already in the first column
rownames(dfSummary_num) <- NULL
#Convert data frame to a flextable for a pretty representation
ftSummary_num <- flextable(dfSummary_num)
#Saving flextable as a docx in order to copy and paste the table in the report
save_as_docx("Numerical" = ftSummary_num, "Categorical" = ftSummary_factors,path = "DESCRIPTIVE ANALYSIS/DATASET 3/summary_d3.docx")
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d3 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf,"Mode" = apply(d3 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
#Deletion of some columns that aren't relevant
#summaryDf_factors <- summaryDf_factors[,-c(3,4,5)]
#Parsing the dataFrame to a flextable in order to make it prettier
ftSummary_factors <- flextable(summaryDf_factors)
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d3 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf,"Mode" = apply(d3 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
viridis,
hrbrthemes,
tidyr         # Reshape dataframes, helpful to plot them
)
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d3 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf_factors,"Mode" = apply(d3 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
#Deletion of some columns that aren't relevant
#summaryDf_factors <- summaryDf_factors[,-c(3,4,5)]
#Parsing the dataFrame to a flextable in order to make it prettier
ftSummary_factors <- flextable(summaryDf_factors)
print(ftSummary_factors)
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d3 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf_factors,"Mode" = apply(d3 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
#Deletion of some columns that aren't relevant
summaryDf_factors <- summaryDf_factors[,-c(3,4,5)]
#Parsing the dataFrame to a flextable in order to make it prettier
ftSummary_factors <- flextable(summaryDf_factors)
print(ftSummary_factors)
#Check if the following packages are installed, if not install them
pacman::p_load(
pastecs,      # for data summaries
tidyverse,    # data management + ggplot2 graphics
flextable,    # converting tables to pretty images
corrplot,     # study correlation
viridis,
hrbrthemes,
tidyr         # Reshape dataframes, helpful to plot them
)
#Reading the third dataset
d3 <- read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#discretize Outcome variable
d3$Outcome <- ifelse(d3$Outcome == 0,"No diabetes","Diabetes")
#Outcome as a factor
d3$Outcome <- as.factor(d3$Outcome)
#Selection of categorical variables
factor_vars <- d3 %>% select_if(is.factor)
#Creation of the summary
summaryDf_factors<- skim(factor_vars)
#Function to calculate the mode and adding it to the summary
summaryDf_factors <- cbind(summaryDf_factors,"Mode" = apply(d3 %>% select_if(is.factor), 2, function(x) {
c(Mode = Mode(x))
}))
#Deletion of some columns that aren't relevant
summaryDf_factors <- summaryDf_factors[,-c(3,4,5)]
#Parsing the dataFrame to a flextable in order to make it prettier
ftSummary_factors <- flextable(summaryDf_factors)
# Creating an extend summary of the numeric values of the data frame
dfSummary_num = d3 %>% select_if(is.numeric) %>% stat.desc(norm=TRUE)
# Deletion of some irrelevant rows
dfSummary_num <- dfSummary_num[-c(7,10,11,16,18),]
#Round numeric columns to 2 decimal numbers
dfSummary_num <- dfSummary_num %>% mutate(across(where(is.numeric), round, digits = 2))
#adding a column with the row names. Necessary for the flextable
statRow <- data.frame("Stat"=rownames(dfSummary_num))
dfSummary_num <- cbind(statRow,dfSummary_num)
# Get the quartiles and IQR for each column (excluding the summary rows)
quartiles <- cbind("Stat" = c("Q1","Q2","Q3","IQR"),apply(d3[,1:8], 2, function(x) {
q1 <- quantile(x,0.25)
q2 <- quantile(x,0.5)
q3 <- quantile(x,0.75)
iqr <- IQR(x)
c(Q1 = q1, Q2 = q2, Q3=q3 , IQR = iqr)
}))
# Add the quartiles and IQR as new rows to the dataframe
dfSummary_num <- rbind(dfSummary_num, quartiles)
#Deletion of rownames because they are already in the first column
rownames(dfSummary_num) <- NULL
#Convert data frame to a flextable for a pretty representation
ftSummary_num <- flextable(dfSummary_num)
#Saving flextable as a docx in order to copy and paste the table in the report
save_as_docx("Numerical" = ftSummary_num, "Categorical" = ftSummary_factors,path = "DESCRIPTIVE ANALYSIS/DATASET 3/summary_d3.docx")
