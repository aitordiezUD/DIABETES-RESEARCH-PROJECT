adios = print("adios"))
s
switch(EXPR = 1,
1 = print("hola"),
switch(EXPR = 1,
print("hola"),
print("adios"))
library(tibble)
tib<-tibble(
nmb=1:10,
ltt=LETTERS[LETTERS>="A" & LETTERS<="J"],
fls=FALSE
)
View(tib)
tib2<-tribble(
~asteroid,~diameter,~pho,
"Ceres", 939.4, FALSE,
"Didymos", 0.78, TRUE
)
View(tib2)
tb1 <-tibble(
numbers= sample(1:10,6),
lts= sample(letters,6)
)
View(tb1)
tb1$numbers[2]
tb1$fls<-False
tb1$fls<-FALSE
tb1$fls<-c(FALSE,TRUE)
1:nrow(mtcars) %in% heaviest_cars
l <- list(uno = 1:10,dos = 10:20)
l[1]
l["uno"]
l[[1]]
l[["uno"]]
p <- list(num=9:2, wine=list(TRUE, seq(1,2,0.2)), state.name)
names(p)
length(tib1)
length(tb1)
length(unlist(tb1)
)
rownames(tb1)<-20:25
tb1$numbers[tb1$numbers>5]
tb1[tb1$numbers>5]
tb1$numbers>5
df1 <- as.data.frame(tb1)
rlang::last_trace()
df1[tb1$numbers>5]
View(df1)
df1[df1$numbers>5,]
tb1[tb1$numbers>5,]
tb1$lts[tb1$lts< "s"]
tb2<-rbind(tb1,list(0,"A",FALSE))
View(tb2)
tb3 <- cbind(tb2,tb2$numbers>6)
View(tb3)
tb3 <- cbind(tb2,tb2$numbers<6)
tb4 <- rbind(tb3[1:3],list(11,"Z",FALSE,FALSE),tb3[4:6])
tb4 <- rbind(tb3[1:3],list(11,"Z",FALSE,FALSE),tb3[4:nrow(tb3)])
tb3[4:nrow(tb3)]
tb3[4:7]
tb3[1:3]
View(df1)
df1[1:3]
tb4 <- rbind(tb3[1:3,],list(11,"Z",FALSE,FALSE),tb3[4:7,])
View(tb4)
View(tb3)
df5 <- data.frame(n=0:12, x=(0:12)^2)
df5 <- data.frame(numbers=0:12, x=(0:12)^2)
tib5<-merge(tb4,df5,by="numbers")
View(tib5)
View(df5)
View(tb4)
m<-matrix(1:4,ncol=2)
m
size(m)
length(m)
unlist(m)
l<-list(uno = 1:10,dos=2:20)
df<- as.data.frame(l)
l<-list(uno = 1:10,dos=11:20)
df<- as.data.frame(l)
View(df)
# Exercise 146
app <- list(
22:2,
runif(10),
c(pi,sqrt(2)),
c(T,T,F,F)
)
b <- sapply(app,var)
b
d <- sapply(app, "[",2)
d
s <- lapply(1:10,function(x)x^2)
s
unlist(s)
sapply(s)
sapply(s,"[")
l
class(l[1])
class(l[[1])
class(l[[1]])
is.vector(l)
is.atomic(l)
is.atomic(1:10)
m <- diag(5)
m
m <- diag(c(1,9,2))
m
diag(m)
y ~ x
y(2)
w<- lapply(1:10, function(x)x**2)
w
w.names
names(w)
z<-unlist(w)
is.list(z)
is.atomic(z)
print(now(tzone="Asia/Tokyo"))
# print(with_tz(now(), tzone="Asia/Tokyo"))
# print(strftime(Sys.time(), tz="Asia/Tokyo"))
print(now(tzone="Asia/Tokyo"))
print(with_tz(now(), tzone="Asia/Tokyo"))
print(strftime(Sys.time(), tz="Asia/Tokyo"))
summary(iris)
str(iris)
cor(rock&area,rock$shape)
cor(rock$area,rock$shape)
cor(rock$area,rock$peri)
cor(rock$peri,rock$perm)
source("~/.active-rstudio-document")
View(df)
View(df)
summary(df)
boxplot(df)
cor(df$residual.sugar,df$density)
plot(iris)
plot(state.x77)
view(state.x77)
state.x77
plot(state.x77[,"Income"],state.x77[,"Illiteracy"], col = "red")
plot(state.x77[,"Income"],state.x77[,"Illiteracy"], col = 1:2
)
plot(state.x77[,"Income"],state.x77[,"Illiteracy"], col = c("red","blue"))
x <- runif(100)
plot(x, type="l")
plot(x, type="l",col="blue")
plot(1:8, sample(1:8), pch=24, cex=1.5, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1.5, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1, bg="orange",
main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1, bg="orange",main="Random points", xlab="x axis", ylab="y axis")
plot(1:8, sample(1:8), pch=24, cex=1.5, bg="orange",main="Random points", xlab="x axis", ylab="y axis")
x <- rnorm(100)
y <- rnorm(100)
x
y
shiny::runApp('C:/Users/aitor/Downloads')
source("~/.active-rstudio-document")
install.packages("ggplot2")
source("~/.active-rstudio-document")
ggplot(datos, aes(x = Año, y = Valor, group = 1)) +
geom_line() +
labs(title = "Análisis Temporal", x = "Año", y = "Valor") +
theme_minimal()
source("~/.active-rstudio-document")
ggplot(datos, aes(x = Año, y = Valor, group = 1)) +
geom_line() +
labs(title = "Análisis Temporal", x = "Año", y = "Valor") +
theme_minimal()
?geom_histogram
pacman::p_load(
faraway
)
# Introduction
# we will use the faraway library
library(faraway)
# we will work with the Gala dataset
# Gala dataset: number of species of plants in the Galapago islands
data(gala)
# lets get a glimpse of the dataset
head(gala)
# the dataset covers 30 observations (islands) and 7 variables
dim(gala)
# therefore the independent variables are
x <- model.matrix(~Area+Elevation+Nearest+Scruz+Adjacent,data=gala)
View(x)
# and the dependent variable is
y <- gala$Species
# now we apply the formula for the estimation of beta
# t is the transpose
# %*% is the matrix multiplication
# and solve yields the inverse
solve(t(x)%*%x)%*%t(x)%*%y
# Model (library)
# let us now see how to use the Faraway library
# use the lm() command for linear models
mod1 <- lm(Species~Area+Elevation+Nearest+Scruz+Adjacent, data=gala)
# use residuals() for the residuals (difference between data and prediction)
residuals(mod1)
# use fitted() for the prediction of the model
fitted(mod1)
# use deviance() for the residual sum of squares
deviance(mod1)
# use df.residual() for the degrees of freedom
df.residual(mod1)
# remember this should be m-(n+1)
30-(5+1)
# and use coef() for the estimation of the parameters
coef(mod1)
# the model contains more information that we may extract
names(mod1)
# we may be interested in the command summary() for a summary of the results
summary(mod1)
# the summary provides access to even more information
mod1s <- summary(mod1)
names(mod1s)
# for instance we can obtain R^2 from the summary
mod1s$r.squared
# which can also be computed with the corresponding formula
1-deviance(mod1)/sum((y-mean(y))^2)
# Inference
# Variances and standard deviations of the errors and parameters given their models
# We can use the summary it to compute sigma (standard deviation of errors)
mod1s$sigma
# Inference
# Variances and standard deviations of the errors and parameters given their models
# We can use the summary it to compute sigma (standard deviation of errors)
mod1s$sigma
# which is also available via the residual sum of squares and the degrees of freedom
sqrt(deviance(mod1)/df.residual(mod1))
# we can also compute the standard deviation of the parameters with the summary
mod1s$coef[,2]
# which are also available with the corresponding formula
sqrt(diag(solve(t(x)%*%x)*mod1s$sigma^2))
# Confidence intervals
# Confidence interval for the parameters
# we can obtain the boundaries with confint for a value of alpha=0.05
confint(mod1)
install.packages("knitr")
iris2 <- head(iris)
knitr::kable(iris2, col.names = gsub("[.]", " ", names(iris)))
install.packages("kableExtra")
kable(iris2, format = "html", caption = "Mi dataframe") %>%
kable_styling(
font_size = 12,
background_color = "white",
border_color = "black"
)
library(tidyverse)
kable(iris2, format = "html", caption = "Mi dataframe") %>%
kable_styling(
font_size = 12,
background_color = "white",
border_color = "black"
)
library(kableExtra)
library(knitr)
kable(iris2, format = "html", caption = "Mi dataframe") %>%
kable_styling(
font_size = 12,
background_color = "white",
border_color = "black"
)
??read_html
??html_nodes
??rank
?rank
?values
?seq
??amatch
?amatch
??stringdist::amatch
install.packages("stringdist")
?stringdist::amatch
?read_csv
?read.csv()
??dummy_cols
?corrplot::corrplot.mixed()
?corrplot
?corrplot::corrplot.mixed()
?dist
library(kableExtra)
kbl(dt,"latex")
dt <- mtcars[1:5, 1:6]
library(kableExtra)
kbl(dt,"latex")
library(kableExtra)
kbl(dt)
kbl(dt, booktabs = T)
library(kableExtra)
kbl(dt,"latex")
kbl(dt, booktabs = T)
kbl(mtcars[1:8, 1:4], booktabs = T, linesep = "") %>%
kable_styling(latex_options = "striped", stripe_index = c(1,2, 5:6))
?read.csv
NA>1.4
?knitr::kable
iris2 <- head(iris)
knitr::kable(iris2, col.names = gsub("[.]", " ", names(iris)))
library(knitr)
library(kableExtra)
kable(head(iris, 5), align = 'c', booktabs = TRUE) %>%
row_spec(1, bold = TRUE, italic = TRUE) %>%
row_spec(2:3, color = 'white', background = 'black') %>%
row_spec(4, underline = TRUE, monospace = TRUE) %>%
row_spec(5, angle = 45) %>%
column_spec(5, strikeout = TRUE)
?column_spec
```{r}
```{r}
df2 <- data.frame(translations = c("ta nipfey tag mud ta cep mud ta did bedwat ulu Norris nola mud Frodo Baggins.  pik tos solo 5 fog lugol, sim ulu roundhouse-gnupea Sauron's butt halfway thru ta prima koimem.",
"ulu Norris tis pstgul ta ell ka nunu bapple, yikai. . ex coopee azo hit corro ta ta daa yeh ex's lib a upospa, Yi kai yai yai!  ulu Norris tis adtut lib a upospa.",
"een ta pica nos bodib ta ditmop..  pelo yob bodib nos?  - pik tos ulu Norris!",
"ulu Norris' jugbys tau gag...  1)porp-AU-purcam, dah mogcab 12, 2010 2)addon sun sun sukhep 04, 2010 3)RYUKYU cooumm, gapay sukhep 26, 2010 4)MAULE, lika sukhep 27, 2010 5)kabis SUMATRA, ourreb dug 05, 2010 6)vetli burkey dug 08, 2010 hmmmmmm.",
"temer ulu Norris merciless upsmun 27 Ninjas weebo vacationing een gapay, ta aibug obidan bap pak ex soko be dos.  lo yapapo tos, \"domo vox cama pik, ka bedy am\".",
"asa bada tos a spaghetti cama ulu Norris to'd be godcee da hopa pik feguin alga veela to'd mac pik aka pik polo roundhouse sau to een ta balls."))
# Imprimir usando kable con ancho máximo de columna de 100 caracteres
kable(df2, "simple")
library(dplyr)
kable(df2) %>% column_spec(1,width = "10cm")
kable(df2) %>% column_spec(1,width = "5cm")
?kable
library(formattable)
?palmerpenguins
??palmerpenguins
install.packages("formattable")
?formattable::formattable()
??str_extract
install.packages("stringr")
?str_extract
?stringr::str_extract
stringr::fruit
library(stringr)
str_extract(fruit, "[aeiou]")
str_subset(fruit, "b")
prueba = "The Glory: Season 1 // 더 글로리: 시즌 1"
splt = str_split(prueba,"//")
splt
splt2 = str_split(prueba,"//",simplify = TRUE)
splt2
splt[[1]]
class(splt)
splt[[1]][1]
?lubridate::wday
weekdays_lubridate <- weekdays()[1:7]
pacman::p_load(
tidyverse,
dplyr,
FactoMineR,
factoextra,
stats,
plotly
)
#Read the dataset
d3 = read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
pacman::p_load(
tidyverse,
dplyr,
FactoMineR,
factoextra,
stats,
plotly
)
#Read the dataset
d3 = read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
setwd("C:/Users/aitor/OneDrive/Escritorio/ADVANCED STATISTICS/DIABETES RESEARCH PROJECT")
pacman::p_load(
tidyverse,
dplyr,
FactoMineR,
factoextra,
stats,
plotly
)
#Read the dataset
d3 = read.csv("DESCRIPTIVE ANALYSIS/DATASET 3/diabetes_d3.csv")
#Filtering the dataset, eliminating outliers
d3 = d3 %>% filter(BloodPressure > 0,BMI > 0, Glucose > 0, Insulin > 0, SkinThickness > 0)
#Converting the Outcome variable to a factor:
d3 = d3 %>% mutate(Outcome = ifelse(Outcome == 1, "Diabetic", "Non-Diabetic"))
d3$Outcome = as.factor(d3$Outcome)
X = d3 %>% select(-Outcome,-Age,-Pregnancies)
pca3 <- PCA(X,scale.unit=TRUE,ncp = 3)
vars = pca3$var$coord
vars = data.frame(vars)
vars$Dim.2 <- -vars$Dim.2
vars$Dim.3 <- -vars$Dim.3
comps = pca3$ind$coord
comps = data.frame(comps)
comps$Dim.2 <- -comps$Dim.2
comps$Dim.3 <- -comps$Dim.3
comps = cbind(comps,data.frame(Outcome = d3$Outcome))
total_explained_variance = sum(pca3$eig[,"percentage of variance"][1:3])
tit = paste0("Total Explained Variance = ",round(total_explained_variance,2),"%")
knitr::kable(comps)
knitr::kable(comps)#3D Plot creation with plotly
#Creation of the 3D plot with the individuals
fig <- plot_ly(comps, x = ~Dim.1, y = ~Dim.2, z = ~Dim.3, color = ~Outcome, colors = c('#636EFA','#EF553B') ) %>%
add_markers(size = 12)
# Adding the variables to the plot
for (i in 1:nrow(vars)) {
fig <- add_trace(fig, x = c(0, vars$Dim.1[i]), y = c(0, vars$Dim.2[i]),
z = c(0, vars$Dim.3[i]), name = rownames(vars)[i],
type = 'scatter3d', mode = 'lines', color = I("black"))
}
# Adding the label to the variables
labels = list()
for (i in 1:nrow(vars)) {
labels[[i]] = list(
showarrow = F,
x = vars$Dim.1[i],
y = vars$Dim.2[i],
z = vars$Dim.3[i],
text = rownames(vars)[i],
xanchor = "left",
xshift = 5
)
}
#Adding the labels to the plot
fig = fig %>% layout(
title = tit,
legend = list(title=list(text='<b>Outcome of Diabetes Test</b>')),
scene = list(
xaxis = list(title = paste0('Comp. 1 (',round(pca3$eig[,"percentage of variance"][1],2),"%)")),
yaxis = list(title = paste0('Comp. 2 (',round(pca3$eig[,"percentage of variance"][2],2),"%)")),
zaxis = list(title = paste0('Comp. 3 (',round(pca3$eig[,"percentage of variance"][3],2),"%)")),
annotations = labels
)
)
#Visualize the plot in RStudio
fig
#####################################################################
#PCA
pca3 <- PCA(d3 %>% select(-Outcome,-Age,-Pregnancies),scale.unit=TRUE)
#Scree plot
fviz_eig(pca3,addlabels = TRUE, ylim = c(0, 50),
barfill = "steelblue",barcolor = "black",
linecolor = "black",title ="% of explained variance by each component")
#Plot for individuals
fviz_pca_ind(pca3, label="none", habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95) +
scale_color_brewer(palette="Set1") +
theme_minimal()
#Plot for variables
fviz_pca_var(pca3, col.var = "contrib", repel = TRUE) +
scale_colour_gradient(high = "#001840",low= "#b0ceff") +
labs(color = "Contribution") +
theme_minimal()
#BIPLOT: Individuals and Variables
fviz_pca_biplot(pca3, label="var",col.var = "black", repel=TRUE, habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95)
#Visualize the plot in RStudio
fig
#####################################################################
#PCA
pca3 <- PCA(d3 %>% select(-Outcome,-Age,-Pregnancies),scale.unit=TRUE)
#Scree plot
fviz_eig(pca3,addlabels = TRUE, ylim = c(0, 50),
barfill = "steelblue",barcolor = "black",
linecolor = "black",title ="% of explained variance by each component")
#Plot for individuals
fviz_pca_ind(pca3, label="none", habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95) +
scale_color_brewer(palette="Set1") +
theme_minimal()
#####################################################################
#PCA
pca3 <- PCA(d3 %>% select(-Outcome,-Age,-Pregnancies),scale.unit=TRUE)
#Scree plot
fviz_eig(pca3,addlabels = TRUE, ylim = c(0, 50),
barfill = "steelblue",barcolor = "black",
linecolor = "black",title ="% of explained variance by each component")
#Plot for individuals
fviz_pca_ind(pca3, label="none", habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95) +
scale_color_brewer(palette="Set1") +
theme_minimal()
#Plot for variables
fviz_pca_var(pca3, col.var = "contrib", repel = TRUE) +
scale_colour_gradient(high = "#001840",low= "#b0ceff") +
labs(color = "Contribution") +
theme_minimal()
#BIPLOT: Individuals and Variables
fviz_pca_biplot(pca3, label="var",col.var = "black", repel=TRUE, habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95)
#####################################################################
#PCA
pca3 <- PCA(d3 %>% select(-Outcome,-Age,-Pregnancies),scale.unit=TRUE)
#Scree plot
fviz_eig(pca3,addlabels = TRUE, ylim = c(0, 50),
barfill = "steelblue",barcolor = "black",
linecolor = "black",title ="% of explained variance by each component")
#Plot for individuals
fviz_pca_ind(pca3, label="none", habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95) +
scale_color_brewer(palette="Set1") +
theme_minimal()
#Plot for variables
fviz_pca_var(pca3, col.var = "contrib", repel = TRUE) +
scale_colour_gradient(high = "#001840",low= "#b0ceff") +
labs(color = "Contribution") +
theme_minimal()
#BIPLOT: Individuals and Variables
fviz_pca_biplot(pca3, label="var",col.var = "black", repel=TRUE, habillage=d3$Outcome,
addEllipses=TRUE, ellipse.level=0.95)
